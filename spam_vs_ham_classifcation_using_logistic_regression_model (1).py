# -*- coding: utf-8 -*-
"""Spam vs Ham classifcation using  logistic regression model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18WJ0Mkr0aqRu7Qx3rvVAQDq3rMQeP7Cm
"""

import numpy as np  # numpy arrays  manipulation
import pandas as pd   #data analysis
import nltk   # python library for nlp tasks
import re  #python module to check and fetch patterns in text
from nltk.corpus import stopwords   # stop words are less important words
from nltk.stem.porter import PorterStemmer     # algorithm to reduce words to root form by removing suffix
from sklearn.feature_extraction.text import TfidfVectorizer   #converting text into numerical vectors
from sklearn.model_selection import train_test_split  #spliting data into train and test parts
from sklearn.linear_model import LogisticRegression  # model for classification
from sklearn.metrics import accuracy_score  #metrics to evaluate training and testing accuracy

nltk.download("stopwords")   # downloading stopwords available in nltk library

print(stopwords.words("english"))   # printing downloadded stopwords

df=pd.read_csv('/content/spam_and_ham_classification.csv')  #dataframe to show data set in tabular format

df.head()  # default method to show first 5 rows of data set

df.isnull().sum()

df['label']=df['label'].map({'ham':0,'spam':1})

print(df['label'])

print(type(df['text']))

port_stem= PorterStemmer()  # creating variable and storing stemming function inside it

def stemming(text):  # creating function stemming on feature=text
  if isinstance(text, list):
        text = ' '.join(text)
  stemmed_text = re.sub('[^a-zA-Z]',' ',text)  # re.sub function will substitute anything other then upper and lower alphabets with a space
  stemmed_text = stemmed_text.lower()  # lower function will lower any upper case letter if present
  stemmed_text = stemmed_text.split()  #split function will split text into words or tokens
  stemmed_text = [port_stem.stem(word) for word in stemmed_text if not word in stopwords.words("english")]  #calling stemming function and a loop that removes stop words
  stemmed_text = ' '.join(stemmed_text)  #joining the stemmed text back into a single string with spaces
  return stemmed_text

df['text']=df['text'].apply(stemming)

print(df['text'])

x=df.drop(columns='label',axis=1)
y=df['label']

print(x)
print(y)

print(x.shape)
print(y.shape)

X=df['text'].values
Y=df['label'].values

print(df['text'])

vectorizer= TfidfVectorizer()
vectorizer.fit(X)

X=vectorizer.transform(X)

print(X)

"""Spliting the data into train test split"""

X_train,X_test,Y_train,Y_test= train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

"""Training the model"""

model= LogisticRegression()
model.fit(X_train,Y_train)

"""Evaluating model"""

# Evaluating training accuracy

X_train_prediction= model.predict(X_train)
train_accuracy= accuracy_score(X_train_prediction,Y_train)
print(train_accuracy)

# Evaluating test accuracy

X_test_prediction= model.predict(X_test)
test_accuracy= accuracy_score(X_test_prediction,Y_test)
print(test_accuracy)

"""Building a predictive system"""

df['text'].iloc[2]

input_data=["into the kingdom of god and those that are entering in he lord pardon escapenumber us in this thing we pray thee have us excused escapenumbernot therefore o escapenumber believers to look into the grave for to you it the holy ghost and escapenumber therefore being a holy habitation unto forth the words of truth and escapenumber soberness escapenumber but in all probability hath made them mad escapenumber and though escapenumber blessed be god all do that of jesus christ they see the necessity of escapenumber closing with a more than almost christians but is heaven so small a escapenumber trifle in men's esteem as not to be total renovation of the whole man escapenumber by the righteousness of complete though we be delivered from the power escapenumber we are not candle of the lord shines out and your redeemer lifts up the escapenumber inward holiness as indeed sometimes they do though in a worms destroy escapenumber them yet even in their flesh shall they see a mind to see jesus but escapenumber then they cannot come to him jeannine walsh"]
cleaned_input= stemming(input_data)
input_vector= vectorizer.transform([cleaned_input])
prediction= model.predict(input_vector)
print(prediction)
if (prediction[0]==1):
  print("Its a Spam Email")
else:
  print("Its a Ham email")